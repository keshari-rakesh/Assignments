Create an Apex class that uses the @future annotation to update Account records.
Create an Apex class with a future method that accepts a List of Account IDs and 
updates a custom field on the Account object with the number of contacts associated to the Account. 
Write unit tests that achieve 100% code coverage for the class. Every hands-on challenge in this module 
asks you to create a test class.

----------------------Apex Class to fetch data----------------------

public class AccountProcessor {
    
    @future
    public static void countContacts(List<Id> accountIds){
        List<Account> accounts = [Select id, (Select id from Contacts) from Account where id IN :accountIds ];
        
        for(Account acc : accounts){
            acc.Number_Of_Contacts__c = acc.Contacts.size();
        } 
        
        update accounts;
    }
}

----------------------Apex Test Class----------------------

@isTest
private class AccountProcessorTest {
	@isTest
    private static void countContactsTest(){
        
        //Load Test Data
        List<Account> accounts = new List<Account>();
        for(Integer i=0; i<300; i++){
            accounts.add(new Account(Name='Test Account'+i));
        }
        insert accounts;
        
        List<Contact> contacts = new List<Contact>();
        List<Id> accountIds = new List<Id>();
        for(Account acc:accounts){
            contacts.add(new Contact(FirstName=acc.Name, LastName='Test Contact',AccountId=acc.Id));
            accountIds.add(acc.Id);
        }
        insert contacts;
        
        //Do the Test
        Test.startTest();
        AccountProcessor.countContacts(accountIds);
        Test.stopTest();
        
        //Check Result
        List<Account> accs = [Select Id, Number_Of_Contacts__c from Account];
        for(Account acc : accs){
            System.assertEquals(1,acc.Number_Of_Contacts__c, 'Error');
        }
    }
}